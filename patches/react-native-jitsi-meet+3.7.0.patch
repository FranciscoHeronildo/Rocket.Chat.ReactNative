diff --git a/node_modules/react-native-jitsi-meet/android/build.gradle b/node_modules/react-native-jitsi-meet/android/build.gradle
index 5fab4de..584f93c 100644
--- a/node_modules/react-native-jitsi-meet/android/build.gradle
+++ b/node_modules/react-native-jitsi-meet/android/build.gradle
@@ -49,14 +49,15 @@ repositories {
 }
 
 dependencies {
-    implementation ("org.jitsi.react:jitsi-meet-sdk:2.4.0") {
+    implementation ("org.jitsi.react:jitsi-meet-sdk:3.7.0") {
       // exclude group: 'com.facebook.react', module:'react-native-vector-icons'
-      // exclude group: 'com.facebook.react', module:'react-native-webview'
-      // exclude group: 'com.facebook.react', module:'react-native-background-timer'
       // exclude group: 'com.facebook.react', module:'react-native-youtube'
-      // exclude group: 'com.facebook.react', module:'react-native-community-async-storage'
-      // exclude group: 'com.facebook.react', module:'react-native-community_netinfo'
-      // exclude group: 'com.facebook', module:'hermes'
+      exclude group: 'com.facebook.react', module:'react-native-background-timer'
+      exclude group: 'com.facebook.react', module:'react-native-webview'
+      exclude group: 'com.facebook.react', module:'react-native-async-storage'
+      exclude group: 'com.facebook.react', module:'react-native-community_netinfo'
+      exclude group: 'com.facebook.react', module:'react-native-device-info'
+      exclude group: 'com.facebook', module:'hermes'
       transitive = true
     }
 }
diff --git a/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetModule.java b/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetModule.java
index e10602d..fa5b98e 100644
--- a/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetModule.java
+++ b/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetModule.java
@@ -108,6 +108,7 @@ public class RNJitsiMeetModule extends ReactContextBaseJavaModule {
             public void run() {
                 if (mJitsiMeetViewReference.getJitsiMeetView() != null) {
                     mJitsiMeetViewReference.getJitsiMeetView().leave();
+                    mJitsiMeetViewReference.getJitsiMeetView().dispose();
                 }
             }
         });
diff --git a/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetView.java b/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetView.java
index fb85d26..d839d9c 100644
--- a/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetView.java
+++ b/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetView.java
@@ -169,4 +169,11 @@ public class RNJitsiMeetView extends BaseReactView<JitsiMeetViewListener>
     protected void onExternalAPIEvent(String name, ReadableMap data) {
         onExternalAPIEvent(LISTENER_METHODS, name, data);
     }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        dispose();
+        leave();
+        super.onDetachedFromWindow();
+    }
 }
\ No newline at end of file
diff --git a/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetViewManager.java b/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetViewManager.java
index 1f9ba74..0305926 100644
--- a/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetViewManager.java
+++ b/node_modules/react-native-jitsi-meet/android/src/main/java/com/reactnativejitsimeet/RNJitsiMeetViewManager.java
@@ -1,5 +1,12 @@
 package com.reactnativejitsimeet;
 
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
+
 import com.facebook.react.bridge.Arguments;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReadableMap;
@@ -11,14 +18,15 @@ import com.facebook.react.uimanager.ThemedReactContext;
 import com.facebook.react.uimanager.annotations.ReactProp;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
 
-import org.jitsi.meet.sdk.JitsiMeetViewListener;
+import org.jitsi.meet.sdk.BroadcastEvent;
+import org.jitsi.meet.sdk.BroadcastIntentHelper;
 
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Map;
 
 @ReactModule(name = RNJitsiMeetViewManager.REACT_CLASS)
-public class RNJitsiMeetViewManager extends SimpleViewManager<RNJitsiMeetView> implements JitsiMeetViewListener {
+public class RNJitsiMeetViewManager extends SimpleViewManager<RNJitsiMeetView> {
     public static final String REACT_CLASS = "RNJitsiMeetView";
     private IRNJitsiMeetViewReference mJitsiMeetViewReference;
     private ReactApplicationContext mReactContext;
@@ -28,6 +36,13 @@ public class RNJitsiMeetViewManager extends SimpleViewManager<RNJitsiMeetView> i
         mReactContext = reactContext;
     }
 
+    private final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            onBroadcastReceived(intent);
+        }
+    };
+
     @Override
     public String getName() {
         return REACT_CLASS;
@@ -37,9 +52,9 @@ public class RNJitsiMeetViewManager extends SimpleViewManager<RNJitsiMeetView> i
     public RNJitsiMeetView createViewInstance(ThemedReactContext context) {
         if (mJitsiMeetViewReference.getJitsiMeetView() == null) {
             RNJitsiMeetView view = new RNJitsiMeetView(context.getCurrentActivity());
-            view.setListener(this);
             mJitsiMeetViewReference.setJitsiMeetView(view);
         }
+        registerForBroadcastMessages();
         return mJitsiMeetViewReference.getJitsiMeetView();
     }
 
@@ -97,39 +112,105 @@ public class RNJitsiMeetViewManager extends SimpleViewManager<RNJitsiMeetView> i
         }
     }
 
-    public void onConferenceJoined(Map<String, Object> data) {
-        WritableMap event = Arguments.createMap();
-        event.putString("url", (String) data.get("url"));
-        mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
-                mJitsiMeetViewReference.getJitsiMeetView().getId(),
-                "conferenceJoined",
-                event);
-    }
+    private void registerForBroadcastMessages() {
+        IntentFilter intentFilter = new IntentFilter();
+
+        /* This registers for every possible event sent from JitsiMeetSDK
+           If only some of the events are needed, the for loop can be replaced
+           with individual statements:
+           ex:  intentFilter.addAction(BroadcastEvent.Type.AUDIO_MUTED_CHANGED.getAction());
+                intentFilter.addAction(BroadcastEvent.Type.CONFERENCE_TERMINATED.getAction());
+                ... other events
+         */
+        for (BroadcastEvent.Type type : BroadcastEvent.Type.values()) {
+            intentFilter.addAction(type.getAction());
+        }
 
-    public void onConferenceTerminated(Map<String, Object> data) {
-        WritableMap event = Arguments.createMap();
-        event.putString("url", (String) data.get("url"));
-        event.putString("error", (String) data.get("error"));
-        mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
-                mJitsiMeetViewReference.getJitsiMeetView().getId(),
-                "conferenceTerminated",
-                event);
+        LocalBroadcastManager.getInstance(mJitsiMeetViewReference.getJitsiMeetView().getContext()).registerReceiver(broadcastReceiver, intentFilter);
     }
 
-    public void onConferenceWillJoin(Map<String, Object> data) {
-        WritableMap event = Arguments.createMap();
-        event.putString("url", (String) data.get("url"));
-        mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
-                mJitsiMeetViewReference.getJitsiMeetView().getId(),
-                "conferenceWillJoin",
-                event);
+    private void onBroadcastReceived(Intent intent) {
+        if (intent != null) {
+
+            BroadcastEvent event = new BroadcastEvent(intent);
+            WritableMap eventMap = Arguments.createMap();
+
+            switch (event.getType()) {
+                case CONFERENCE_JOINED:
+                    eventMap = Arguments.createMap();
+                    eventMap.putString("url", (String) event.getData().get("url"));
+                    eventMap.putString("error", (String) event.getData().get("error"));
+                    mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
+                            mJitsiMeetViewReference.getJitsiMeetView().getId(),
+                            "conferenceJoined",
+                            eventMap);
+                    break;
+
+                case CONFERENCE_TERMINATED:
+                    eventMap = Arguments.createMap();
+                    eventMap.putString("url", (String) event.getData().get("url"));
+                    eventMap.putString("error", (String) event.getData().get("error"));
+                    mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
+                            mJitsiMeetViewReference.getJitsiMeetView().getId(),
+                            "conferenceTerminated",
+                            eventMap);
+
+                    Intent hangupBroadcastIntent = BroadcastIntentHelper.buildHangUpIntent();
+                    LocalBroadcastManager.getInstance(mJitsiMeetViewReference.getJitsiMeetView().getContext()).sendBroadcast(hangupBroadcastIntent);
+
+                    mJitsiMeetViewReference.getJitsiMeetView().dispose();
+                    break;
+
+                case CONFERENCE_WILL_JOIN:
+                    eventMap = Arguments.createMap();
+                    eventMap.putString("url", (String) event.getData().get("url"));
+                    eventMap.putString("error", (String) event.getData().get("error"));
+                    mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
+                            mJitsiMeetViewReference.getJitsiMeetView().getId(),
+                            "conferenceWillJoin",
+                            eventMap);
+                    break;
+            }
+        }
     }
 
+//    public void onConferenceJoined(Map<String, Object> data) {
+//        WritableMap event = Arguments.createMap();
+//        event.putString("url", (String) data.get("url"));
+//        mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
+//                mJitsiMeetViewReference.getJitsiMeetView().getId(),
+//                "conferenceJoined",
+//                event);
+//    }
+//
+//    public void onConferenceTerminated(Map<String, Object> data) {
+//        WritableMap event = Arguments.createMap();
+//        event.putString("url", (String) data.get("url"));
+//        event.putString("error", (String) data.get("error"));
+//        mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
+//                mJitsiMeetViewReference.getJitsiMeetView().getId(),
+//                "conferenceTerminated",
+//                event);
+//    }
+//
+//    public void onConferenceWillJoin(Map<String, Object> data) {
+//        WritableMap event = Arguments.createMap();
+//        event.putString("url", (String) data.get("url"));
+//        mReactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
+//                mJitsiMeetViewReference.getJitsiMeetView().getId(),
+//                "conferenceWillJoin",
+//                event);
+//    }
+
     public Map getExportedCustomBubblingEventTypeConstants() {
         return MapBuilder.builder()
                 .put("conferenceJoined", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onConferenceJoined")))
                 .put("conferenceTerminated", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onConferenceTerminated")))
                 .put("conferenceWillJoin", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onConferenceWillJoin")))
+                .put("audioMuted", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onAudioMuted")))
+                .put("participantJoined", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onParticipantJoined")))
+                .put("participantLeft", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onParticipantLeft")))
+                .put("messageReceived", MapBuilder.of("phasedRegistrationNames", MapBuilder.of("bubbled", "onMessageReceived")))
                 .build();
     }
 }
\ No newline at end of file
